{"ast":null,"code":"import _regeneratorRuntime from \"/home/dakson/dtmoney/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/home/dakson/dtmoney/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/dakson/dtmoney/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/home/dakson/dtmoney/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/dakson/dtmoney/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/dakson/dtmoney/src/hooks/useTransactions.tsx\";\nimport { createContext, useEffect, useState, useContext } from \"react\";\nimport { api } from \"../Services/api\";\nvar TransactionsContext = createContext({});\nexport function TransactionsProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      transactions = _useState2[0],\n      setTransactions = _useState2[1];\n\n  useEffect(function () {\n    api.get('/transactions').then(function (response) {\n      return setTransactions(response.data.transactions);\n    });\n  }, []);\n\n  function createTransaction(_x) {\n    return _createTransaction.apply(this, arguments);\n  }\n\n  function _createTransaction() {\n    _createTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(transactionInput) {\n      var response, transaction;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return api.post('/transactions', _objectSpread({}, transactionInput, {\n                createdAt: new Date()\n              }));\n\n            case 2:\n              response = _context.sent;\n              transaction = response.data.transaction;\n              setTransactions([].concat(_toConsumableArray(transactions), [transaction]));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _createTransaction.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/React.createElement(TransactionsContext.Provider, {\n    value: {\n      transactions: transactions,\n      createTransaction: createTransaction\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, children);\n}\nexport function useTransactions() {\n  var context = useContext(TransactionsContext);\n  return context;\n}","map":{"version":3,"sources":["/home/dakson/dtmoney/src/hooks/useTransactions.tsx"],"names":["createContext","useEffect","useState","useContext","api","TransactionsContext","TransactionsProvider","children","transactions","setTransactions","get","then","response","data","createTransaction","transactionInput","post","createdAt","Date","transaction","useTransactions","context"],"mappings":";;;;;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,EAAwDC,UAAxD,QAA0E,OAA1E;AACA,SAASC,GAAT,QAAoB,iBAApB;AAsBA,IAAMC,mBAAmB,GAAGL,aAAa,CACrC,EADqC,CAAzC;AAIA,OAAO,SAASM,oBAAT,OAAoE;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAA,kBAC9BL,QAAQ,CAAgB,EAAhB,CADsB;AAAA;AAAA,MAC/DM,YAD+D;AAAA,MACjDC,eADiD;;AAGvER,EAAAA,SAAS,CAAC,YAAM;AACZG,IAAAA,GAAG,CAACM,GAAJ,CAAQ,eAAR,EACGC,IADH,CACQ,UAAAC,QAAQ;AAAA,aAAIH,eAAe,CAACG,QAAQ,CAACC,IAAT,CAAcL,YAAf,CAAnB;AAAA,KADhB;AAEH,GAHQ,EAGN,EAHM,CAAT;;AAHuE,WAS5DM,iBAT4D;AAAA;AAAA;;AAAA;AAAA,kFAS3E,iBAAiCC,gBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC2BX,GAAG,CAACY,IAAJ,CAAS,eAAT,oBAChBD,gBADgB;AAEnBE,gBAAAA,SAAS,EAAE,IAAIC,IAAJ;AAFQ,iBAD3B;;AAAA;AACUN,cAAAA,QADV;AAKYO,cAAAA,WALZ,GAK4BP,QAAQ,CAACC,IALrC,CAKYM,WALZ;AAOIV,cAAAA,eAAe,8BACRD,YADQ,IAEXW,WAFW,GAAf;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAT2E;AAAA;AAAA;;AAuBvE,sBACI,oBAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAE;AAAEX,MAAAA,YAAY,EAAZA,YAAF;AAAgBM,MAAAA,iBAAiB,EAAjBA;AAAhB,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKP,QAFL,CADJ;AAOH;AAED,OAAO,SAASa,eAAT,GAA0B;AAC7B,MAAMC,OAAO,GAAGlB,UAAU,CAACE,mBAAD,CAA1B;AAEA,SAAOgB,OAAP;AACH","sourcesContent":["import { createContext, useEffect, useState, ReactNode, useContext } from \"react\"\nimport { api } from \"../Services/api\";\n\ninterface Transaction{\n    id: number;\n    title: string;\n    amount: number;\n    type: string;\n    category: string;\n    createdAt: string;\n}\n\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>\n\ninterface TransactionsProviderProps{\n    children: ReactNode;\n}\n\ninterface TransactionContextData{\n    transactions: Transaction[];\n    createTransaction: ( transactions: TransactionInput ) => Promise<void>\n}\n\nconst TransactionsContext = createContext<TransactionContextData>(\n    {} as TransactionContextData\n)\n\nexport function TransactionsProvider({children}: TransactionsProviderProps){\n    const  [transactions, setTransactions] = useState<Transaction[]>([])\n\n    useEffect(() => {\n        api.get('/transactions')\n          .then(response => setTransactions(response.data.transactions))\n    }, [])\n\n\nasync function createTransaction(transactionInput: TransactionInput){\n    const response = await api.post('/transactions', {\n        ...transactionInput,\n        createdAt: new Date(),\n    })\n    const { transaction } = response.data\n\n    setTransactions([\n        ...transactions,\n        transaction,\n    ])\n\n}\n\n    return(\n        <TransactionsContext.Provider value={{ transactions, createTransaction }}>\n\n            {children}\n            \n        </TransactionsContext.Provider>\n    )\n}\n\nexport function useTransactions(){\n    const context = useContext(TransactionsContext)\n\n    return context\n}\n"]},"metadata":{},"sourceType":"module"}