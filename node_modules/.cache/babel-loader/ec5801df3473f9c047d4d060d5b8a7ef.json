{"ast":null,"code":"var _jsxFileName = \"/home/dakson/dtmoney/src/TransactionsContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport { api } from \"./components/Services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionsContext = /*#__PURE__*/createContext([]);\nexport function TransactionProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    api.get('/transactions').then(response => setTransactions(response.data.transactions));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TransactionsContext.Provider, {\n    value: transactions,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TransactionProvider, \"tSC852gg/pAfbHr6jYEePbawnUU=\");\n\n_c = TransactionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"sources":["/home/dakson/dtmoney/src/TransactionsContext.tsx"],"names":["createContext","useEffect","useState","api","TransactionsContext","TransactionProvider","children","transactions","setTransactions","get","then","response","data"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAA8D,OAA9D;AACA,SAASC,GAAT,QAAoB,2BAApB;;AAeA,OAAO,MAAMC,mBAAmB,gBAAGJ,aAAa,CAAgB,EAAhB,CAAzC;AAEP,OAAO,SAASK,mBAAT,OAAmE;AAAA;;AAAA,MAAtC;AAACC,IAAAA;AAAD,GAAsC;AACtE,QAAO,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAgB,EAAhB,CAAjD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,GAAG,CAACM,GAAJ,CAAQ,eAAR,EACGC,IADH,CACQC,QAAQ,IAAIH,eAAe,CAACG,QAAQ,CAACC,IAAT,CAAcL,YAAf,CADnC;AAEH,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACI,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAEA,YAArC;AAAA,cAEHD;AAFG;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAfeD,mB;;KAAAA,mB","sourcesContent":["import { createContext, useEffect, useState, ReactNode } from \"react\"\nimport { api } from \"./components/Services/api\";\n\ninterface Transaction{\n    id: number;\n    title: string;\n    amount: number;\n    type: string;\n    category: string;\n    createdAt: string;\n}\n\ninterface TransactionsProviderProps{\n    children: ReactNode;\n}\n\nexport const TransactionsContext = createContext<Transaction[]>([])\n\nexport function TransactionProvider({children}: TransactionsProviderProps){\n    const  [transactions, setTransactions] = useState<Transaction[]>([])\n\n    useEffect(() => {\n        api.get('/transactions')\n          .then(response => setTransactions(response.data.transactions))\n    }, [])\n\n    return(\n        <TransactionsContext.Provider value={transactions}>\n\n    {children}\n            \n        </TransactionsContext.Provider>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}